

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>꼽사리구나의 블로그</title>
  <subtitle>공부한 것을 정리하는 나만의 블로그</subtitle>
  <updated>2025-01-09T17:27:51+09:00</updated>
  <author>
    <name>김현우</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2025 김현우 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Servlet</title>
    <link href="http://localhost:4000/posts/servlet/" rel="alternate" type="text/html" title="Servlet" />
    <published>2025-01-09T00:00:00+09:00</published>
  
    <updated>2025-01-09T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/servlet/</id>
    <content type="text/html" src="http://localhost:4000/posts/servlet/" />
    <author>
      <name>김현우</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="Servlet" />
    
  

  <summary>서블릿(Servlet)?
서블릿은 자바 어플리케이션에서 클라이언트 요청을 처리하고 응답을 반환하는 역할을 하는 하나의 클래스
자바 언어를 사용해서 클라이언트와 HTTP 요청, 응답을 주고받는 웹 환경을 구성할 수 있다.
이런 역할을 수행하는 것이 서블릿이다.
ex) 로그인할 때 서버가 클라이언트에서 입력되는 아이디와 비밀번호를 확인하고 결과를 응답하는데, 이러한 역할을 수행하는 것이 서블릿

서블릿(Servlet) 주요 특징

  클라이언트의 Request에 대해 동적으로 작동하는 웹 어플리케이션 컴포넌트
  HTML을 사용하여 응답
  기존의 정적 웹 프로그램의 문제점을 보완하여 동적인 여러 기능을 제공
  JAVA의 쓰레드를 이용하여 동작
  MVC 패턴에서 Controller 역할
  컨테이너에서...</summary>

  </entry>

  
  <entry>
    <title>웹 서버와 WAS</title>
    <link href="http://localhost:4000/posts/webServer_was/" rel="alternate" type="text/html" title="웹 서버와 WAS" />
    <published>2025-01-08T00:00:00+09:00</published>
  
    <updated>2025-01-08T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/webServer_was/</id>
    <content type="text/html" src="http://localhost:4000/posts/webServer_was/" />
    <author>
      <name>김현우</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="WAS" />
    
  

  <summary>Web Server
웹 브라우저 클라이언트로부터 HTTP 요청을 받아들이고 HTML 문서와 같은 웹 페이지를 반환하는 컴퓨터 프로그램

웹 서버란 클라이언트가 웹 브라우저에서 어떠한 페이지 요청을 하면 웹 서버에서 그 요청을 받아 정적 컨텐츠를 제공하는 서버다.
그렇다고 정적 컨텐츠만 제공하는 것이 아니라 웹 서버가 동적 컨텐츠를 요청 받으면 WAS에게 해당 요청을 넘겨주고, WAS에서 처리한 결과를
클라이언트에게 전달해주는 역할도 한다.
대표적인 웹 서버로는 Apache, Nginx가 있다.
정적 컨텐츠 : 단순 HTML문서, CSS, javascript, 이미지, 파일 등 즉시 응답 가능한 컨텐츠


WAS
인터넷 상에서 HTTP 프로토콜을 통해 사용자 컴퓨터나 장치에 애플리케이션을 수행해주는 미들...</summary>

  </entry>

  
  <entry>
    <title>타임리프</title>
    <link href="http://localhost:4000/posts/thymeleaf/" rel="alternate" type="text/html" title="타임리프" />
    <published>2024-12-09T00:00:00+09:00</published>
  
    <updated>2025-01-08T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/thymeleaf/</id>
    <content type="text/html" src="http://localhost:4000/posts/thymeleaf/" />
    <author>
      <name>김현우</name>
    </author>

  
    
    <category term="스프링" />
    
    <category term="타임리프" />
    
  

  <summary>타임리프 특징

  서버 사이드 HTML 렌더링(SSR)
  네츄럴 템플릿
  스프링 통합 지원


“서버 사이드 HTML 렌더링(SSR)”
타임리프는 백엔드 서버에서 HTML을 동적으로 렌더링 하는 용도로 사용된다.

“네츄럴 템플릿”
타임리프는 순수 HTML을 최대한 유지하는 특징이 있다.
타임리프로 작성한 파일은 HTML을 유지하기 때문에 웹 브라우저에서 파일을 직접 열어도 내용을 확인할 수 있고, 서버를 통해 뷰 템플릿을 거치면 동적으로 변경된 결과를 확인할 수 있다.
JSP를 포함한 다른 뷰 템플릿들은 해당 파일을 열면 소스코드와 HTML이 섞여서 웹 브라우저에서 정상적인 HTML 결과를 확인할 수 없다. 오직 서버를 통해서 렌더링 되고 HTML 응답 결과를 받아야 화면을 확인할 수 있다.
반...</summary>

  </entry>

  
  <entry>
    <title>프로그래머스 Lv0 부분 문자열</title>
    <link href="http://localhost:4000/posts/part-string/" rel="alternate" type="text/html" title="프로그래머스 Lv0 부분 문자열" />
    <published>2024-12-04T00:00:00+09:00</published>
  
    <updated>2024-12-04T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/part-string/</id>
    <content type="text/html" src="http://localhost:4000/posts/part-string/" />
    <author>
      <name>김현우</name>
    </author>

  
    
    <category term="코딩테스트" />
    
    <category term="프로그래머스" />
    
  

  <summary>처음에는 for문을 돌려서 풀어볼까 하다가 조금 더 간단하게 풀이하는 방법이 있을 것 같아서 검색해봤다.

contains() : 대상 문자열의 특정 문자열이 포함되었는지 여부를 알고자 할 때 사용 (boolean타입 반환)
indexOf() : 대상 문자열의 특정 문자의 index값을 찾고자 할 때 사용 (해당 index값 반환)
matches() : 대상 문자열의 정규표현식이 포함되었는지 여부를 알고싶을 때 사용 (boolean타입 반환)

class Solution {
    public int solution(String str1, String str2) {
        int answer = 0;
        
        if (str2.contains(str1)){
          ...</summary>

  </entry>

  
  <entry>
    <title>프로그래머스 Lv0 뒤에서 5등까지</title>
    <link href="http://localhost:4000/posts/back5/" rel="alternate" type="text/html" title="프로그래머스 Lv0 뒤에서 5등까지" />
    <published>2024-12-04T00:00:00+09:00</published>
  
    <updated>2024-12-04T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/back5/</id>
    <content type="text/html" src="http://localhost:4000/posts/back5/" />
    <author>
      <name>김현우</name>
    </author>

  
    
    <category term="코딩테스트" />
    
    <category term="프로그래머스" />
    
  

  <summary>idx 변수를 세워 하나씩 값을 비교해나가며 크고 작음을 비교해볼까 하다가 문득 Arrays.sort메소드가 생각나서 정리한다.

오름차순 정렬
Arrays.sort()


내림차순 정렬
Integer arr[] = {1, 2, 3, 4, 5};
Arrays.sort(arr, Collections.reverseOrder());

배열을 내림차순으로 정렬하고자 할 때, 기본 타입 배열이라면 래퍼클래스로 만들어 두번째 인자에 넣어주어야 한다.
(String은 기본 타입이 아니기에 그냥 사용해주면 될 것 같다)

추가적으로 내림차순 정렬할 때 Collections를 사용할 때와 Comparator를 사용할 때의 차이점을 알아놔야할 것 같다.
우선 Collections.reverseOrder()는 주로 Lis...</summary>

  </entry>

</feed>


