

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>꼽사리구나의 블로그</title>
  <subtitle>공부한 것을 정리하는 나만의 블로그</subtitle>
  <updated>2025-01-10T03:31:34+09:00</updated>
  <author>
    <name>김현우</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2025 김현우 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>API</title>
    <link href="http://localhost:4000/posts/API/" rel="alternate" type="text/html" title="API" />
    <published>2025-01-10T00:00:00+09:00</published>
  
    <updated>2025-01-10T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/API/</id>
    <content type="text/html" src="http://localhost:4000/posts/API/" />
    <author>
      <name>김현우</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="API" />
    
  

  <summary>API란 무엇일까?
API는 응용 프로그램에서 사용할 수 있도록, 운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 뜻한다.
API는 프로그램이 요청할 수 있게 명령 목록을 정리하고, 명령을 받으면 응용프로그램과 상호작용하여 명령에 대한 값을 전달하는 역할을 한다.
즉, API는 프로그램들이 서로 상호작용하는 것을 도와주는 매개체라고 할 수 있다.

쉽게 생각해보면 앱이나 프로그램이 다른 시스템에 있는 기능이나 데이터를 사용할 수 있게 만들어둔 메뉴판 같은 것이다.
또 다른 예를 들어보자면, 날씨 앱으로 날씨 데이터를 제공하는 API에 요청을 보낸다고 해보자.
그렇다면 API는 서버로부터 현재 날씨 정보(데이터)를 받아 앱으로 전달하는 역할을 하는 것이다.

API 핵심 ...</summary>

  </entry>

  
  <entry>
    <title>Servlet</title>
    <link href="http://localhost:4000/posts/servlet/" rel="alternate" type="text/html" title="Servlet" />
    <published>2025-01-09T00:00:00+09:00</published>
  
    <updated>2025-01-09T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/servlet/</id>
    <content type="text/html" src="http://localhost:4000/posts/servlet/" />
    <author>
      <name>김현우</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="Servlet" />
    
  

  <summary>서블릿(Servlet)?
서블릿은 자바 어플리케이션에서 클라이언트 요청을 처리하고 응답을 반환하는 역할을 하는 하나의 클래스
자바 언어를 사용해서 클라이언트와 HTTP 요청, 응답을 주고받는 웹 환경을 구성할 수 있다.
이런 역할을 수행하는 것이 서블릿이다.
ex) 로그인할 때 서버가 클라이언트에서 입력되는 아이디와 비밀번호를 확인하고 결과를 응답하는데, 이러한 역할을 수행하는 것이 서블릿

서블릿(Servlet) 주요 특징

  클라이언트의 Request에 대해 동적으로 작동하는 웹 어플리케이션 컴포넌트
  HTML을 사용하여 응답
  기존의 정적 웹 프로그램의 문제점을 보완하여 동적인 여러 기능을 제공
  JAVA의 쓰레드를 이용하여 동작
  MVC 패턴에서 Controller 역할
  컨테이너에서...</summary>

  </entry>

  
  <entry>
    <title>나만의 메모장(WAS와 쓰레드, 서블릿 동작 과정 정리)</title>
    <link href="http://localhost:4000/posts/myMemo/" rel="alternate" type="text/html" title="나만의 메모장(WAS와 쓰레드, 서블릿 동작 과정 정리)" />
    <published>2025-01-09T00:00:00+09:00</published>
  
    <updated>2025-01-09T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/myMemo/</id>
    <content type="text/html" src="http://localhost:4000/posts/myMemo/" />
    <author>
      <name>김현우</name>
    </author>

  
    
    <category term="나만의 메모장" />
    
    <category term="WAS" />
    
    <category term="Thread" />
    
    <category term="Servlet" />
    
  

  <summary>WAS와 쓰레드, 서블릿 동작 과정

  클라이언트에서 HTTP 요청을 보낸다.
  Web Server는 요청을 수신(정적 리소스 요청이면 직접 응답을 반환하고 동적 리소스 요청이면 WAS로 요청을 전달)
  WAS는 요청을 분석하고 URL과 맵핑된 서블릿을 찾는다.
  서블릿을 찾은 후 요청을 처리할 쓰레드를 할당한다.(쓰레드 풀 이용)
  쓰레드는 서블릿 컨테이너에서 해당 서블릿 객체의 service() 메서드를 호출한다.
  service() 메서드는 요청 타입에 따라 적절한 메서드(doGet(), doPost())를 실행한다.
  서블릿은 비즈니스 로직을 수행하고, 결과 데이터를 HttpServletResponse 객체에 담는다.
  서블릿이 생성한 응답은 쓰레드에 의해 클라이언트로 반환한다.
...</summary>

  </entry>

  
  <entry>
    <title>Thread와 Process</title>
    <link href="http://localhost:4000/posts/Thread/" rel="alternate" type="text/html" title="Thread와 Process" />
    <published>2025-01-09T00:00:00+09:00</published>
  
    <updated>2025-01-09T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Thread/</id>
    <content type="text/html" src="http://localhost:4000/posts/Thread/" />
    <author>
      <name>김현우</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="Thread" />
    
    <category term="Process" />
    
  

  <summary>프로세스(Process)
프로세스는 프로그램을 실행시켜 정적인 프로그램이 동적으로 변하여 프로그램이 돌아가고 있는 상태를 말한다.
즉, 컴퓨터에서 작업 중인 프로그램을 의미한다.
(메모리에 적재되고 CPU 자원을 할당받아 프로그램이 실행되고 있는 상태)

쓰레드(Thread)
쓰레드란, 하나의 프로세스 내에서 동시에 진행되는 작업 갈래, 흐름의 단위를 말한다.
ex) 브라우저에서 파일을 다운받으며 쇼핑, 게임을 할 수 있다.

하나의 프로세스 안에서 여러가지 작업들 흐름이 동시에 진행될 수 있다.
이런 작업 흐름들을 쓰레드라고 하며, 여러개가 있다면 이를 멀티 쓰레드라고 한다.

일반적으로 하나의 프로그램은 하나 이상의 프로세스를 가지고 있고, 하나의 프로세스는 반드시 하나 이상의 쓰레드가 존재한다.
...</summary>

  </entry>

  
  <entry>
    <title>웹 서버와 WAS</title>
    <link href="http://localhost:4000/posts/webServer_was/" rel="alternate" type="text/html" title="웹 서버와 WAS" />
    <published>2025-01-08T00:00:00+09:00</published>
  
    <updated>2025-01-08T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/webServer_was/</id>
    <content type="text/html" src="http://localhost:4000/posts/webServer_was/" />
    <author>
      <name>김현우</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="WAS" />
    
  

  <summary>Web Server
웹 브라우저 클라이언트로부터 HTTP 요청을 받아들이고 HTML 문서와 같은 웹 페이지를 반환하는 컴퓨터 프로그램

웹 서버란 클라이언트가 웹 브라우저에서 어떠한 페이지 요청을 하면 웹 서버에서 그 요청을 받아 정적 컨텐츠를 제공하는 서버다.
그렇다고 정적 컨텐츠만 제공하는 것이 아니라 웹 서버가 동적 컨텐츠를 요청 받으면 WAS에게 해당 요청을 넘겨주고, WAS에서 처리한 결과를
클라이언트에게 전달해주는 역할도 한다.
대표적인 웹 서버로는 Apache, Nginx가 있다.
정적 컨텐츠 : 단순 HTML문서, CSS, javascript, 이미지, 파일 등 즉시 응답 가능한 컨텐츠


WAS
인터넷 상에서 HTTP 프로토콜을 통해 사용자 컴퓨터나 장치에 애플리케이션을 수행해주는 미들...</summary>

  </entry>

</feed>


