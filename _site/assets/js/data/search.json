[
  
  {
    "title": "타임리프",
    "url": "/posts/thymeleaf/",
    "categories": "스프링, 타임리프",
    "tags": "스프링, 타임리프",
    "date": "2024-12-09 00:00:00 +0900",
    





    
    "snippet": "타임리프 특징  서버 사이드 HTML 렌더링(SSR)  네츄럴 템플릿  스프링 통합 지원“서버 사이드 HTML 렌더링(SSR)”타임리프는 백엔드 서버에서 HTML을 동적으로 렌더링 하는 용도로 사용된다.“네츄럴 템플릿”타임리프는 순수 HTML을 최대한 유지하는 특징이 있다.타임리프로 작성한 파일은 HTML을 유지하기 때문에 웹 브라우저에서 파일을 직접...",
    "content": "타임리프 특징  서버 사이드 HTML 렌더링(SSR)  네츄럴 템플릿  스프링 통합 지원“서버 사이드 HTML 렌더링(SSR)”타임리프는 백엔드 서버에서 HTML을 동적으로 렌더링 하는 용도로 사용된다.“네츄럴 템플릿”타임리프는 순수 HTML을 최대한 유지하는 특징이 있다.타임리프로 작성한 파일은 HTML을 유지하기 때문에 웹 브라우저에서 파일을 직접 열어도 내용을 확인할 수 있고, 서버를 통해 뷰 템플릿을 거치면 동적으로 변경된 결과를 확인할 수 있다.JSP를 포함한 다른 뷰 템플릿들은 해당 파일을 열면 소스코드와 HTML이 섞여서 웹 브라우저에서 정상적인 HTML 결과를 확인할 수 없다. 오직 서버를 통해서 렌더링 되고 HTML 응답 결과를 받아야 화면을 확인할 수 있다.반면에 타임리프로 작성된 파일은 해당 파일을 그대로 웹 브라우저에서 열어도 정상적인 HTML 결과를 확인할 수 있다.이렇게 순수 HTML을 유지하면서 뷰 템플릿도 사용할 수 있는 타임리프의 특징을 ‘네츄럴 템플릿’이라고 한다.“스프링 통합 지원”타임리프는 스프링과 자연스럽게 통합되고, 스프링의 다양한 기능을 편리하게 사용할 수 있게 지원한다.타임리프를 사용하려면 다음 선언을 하면 된다.&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;텍스트 - text, utext타임리프의 텍스트를 출력하는 기능타임리프는 기본적으로 HTML 태그의 속성에 기능을 정의해서 동작한다.HTML의 콘텐츠에 데이터를 출력할 때 ‘th:text:’를 사용하면 된다.&lt;span th:text=\"${data}\"&gt;HTML 태그의 속성이 아니라 HTML 콘텐츠 영역안에서 직접 데이터를 출력하고 싶으면 ‘[[…]]’를 사용하면 된다.컨텐츠 안에서 직접 출력하기 = [[${data}]]HTML 엔티티웹 브라우저는 ‘&lt;’를 HTML 태그의 시작으로 인식한다.따라서 ‘&lt;’를 태그의 시작이 아니라 문자로 표현할 수 있는 방법이 필요한데, 이를 HTML 엔티티라고 한다.그리고 HTML에서 사용하는 특수 문자를 HTML 엔티티로 변경하는 것을 이스케이프라고 한다.타임리프가 제공하는 ‘th:text’, ‘[[…]]’는 기본적으로 이스케이프를 제공한다.이스케이프 기능을 사용하지 않기 위해서 타임리프는 다음 두 기능을 제공한다.th:text -&gt; th:utext[[...]] -&gt; [(...)]변수 - SpringEL타임리프에서 변수를 사용할 때는 변수 표현식을 사용한다.변수 표현식 : ${...}그리고 이 변수 표현식에는 SpringEL이라는 스프링이 제공하는 표현식을 사용할 수 있다.SpringEL 다양한 표현식 사용Object  user.username : user의 username을 프로퍼티 접근 -&gt; user.getUsername()  user[‘username’] : 위와 같음 -&gt; user.getUsername()  user.getUsername() : user의 getUsername()을 직접 호출List  users[0].username : List에서 첫 번째 회원을 찾고 username 프로퍼티 접근 -&gt; list.get(0).getUsername()  users[0][‘username’] : 위와 같음  users[0].getUsername() : List에서 첫 번째 회원을 찾고 메소드 직접 호출Map  userMap[‘userA’].username : Map에서 userA를 찾고, username 프로퍼티 접근 -&gt; map.get(“userA”).getUsername()  userMap[‘userA’][‘username’] : 위와 같음  userMap[‘userA].getUsername() : Map에서 userA를 찾고 메소드 직접 호출&lt;h1&gt;SpringEL 표현식&lt;/h1&gt;&lt;ul&gt;Object    &lt;li&gt;${user.username} = &lt;span th:text=\"${user.username}\"&gt;&lt;/span&gt;&lt;/li&gt;    &lt;li&gt;${user['username']} = &lt;span th:text=\"${user['username']}\"&gt;&lt;/span&gt;&lt;/li&gt;    &lt;li&gt;${user.getUsername()} = &lt;span th:text=\"${user.getUsername()}\"&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;List    &lt;li&gt;${users[0].username} = &lt;span th:text=\"${users[0].username}\"&gt;&lt;/span&gt;&lt;/li&gt;    &lt;li&gt;${users[0]['username']} = &lt;span th:text=\"${users[0]['username']}\"&gt;&lt;/span&gt;    &lt;/li&gt;    &lt;li&gt;${users[0].getUsername()} = &lt;span th:text=\"${users[0].getUsername()}\"&gt;&lt;/span&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;Map    &lt;li&gt;${userMap['userA'].username} = &lt;span th:text=\"${userMap['userA'].username}\"&gt;&lt;/span&gt;&lt;/li&gt;    &lt;li&gt;${userMap['userA']['username']} = &lt;span th:text=\"${userMap['userA'] ['username']}\"&gt;&lt;/span&gt;&lt;/li&gt;    &lt;li&gt;${userMap['userA'].getUsername()} = &lt;span th:text=\"${userMap['userA'].getUsername()}\"&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;지역 변수 선언th:with을 사용하면 지역 변수를 선언해서 사용할 수 있다.지역 변수는 선언한 태그 안에서만 사용할 수 있다.&lt;h1&gt;지역 변수 - (th:with)&lt;/h1&gt; &lt;div th:with=\"first=${users[0]}\"&gt;    &lt;p&gt;처음 사람의 이름은 &lt;span th:text=\"${first.username}\"&gt;&lt;/span&gt;&lt;/p&gt; &lt;/div&gt;기본 객체타임리프는 기본 객체를 제공한다  ${#request}  ${#response}  ${#session}  ${#servletContext}  ${#locale}#request는 HttpServletRequest객체가 그대로 제공되기 때문에 데이터를 조회하려면 request.getParameter(“data”)처럼 불편하게 접근해야한다.이를 해결하기 위해 편의 객체도 제공한다.  HTTP 요청 파라미터 접근 : param          ${param.paramData}        HTTP 세션 접근 : session          ${session.sessionData}        스프링 빈 접근 : @          ${@helloBean.hello(‘Spring!’)}      유틸리티 객체와 날짜타임리프는 문자, 숫자, 날짜, URI등을 편리하게 다루는 유틸리티 객체를 제공한다  #message : 메세지, 국제화 처리  #uris : URI 이스케이프 지원  #dates : java.util.Date 서식 지원  #calendars : java.util.Calendar 서식 지원  #temporals : 자바 8 날짜 서식 지원  #numbers : 숫자 서식 지원  #strings : 문자 관련 편의 기능  #objects : 객체 관련 기능 제공  #bools : boolean 관련 기능 제공  #arrays : 배열 관련 기능 제공  #lists, #sets, #maps : 컬렉션 관련 기능 제공  #ids : 아이디 처리 관련 기능 제공URL 링크타임리프에서 URL을 생성할 때는 @{…} 문법을 사용하면 된다.단순한 URL@{/hello} -&gt; /hello쿼리 파라미터@{/hello(param1=${param1}, param2=${param2})}  -&gt; /hello?param1=data1&amp;param2=data2  ()에 있는 부분은 쿼리 파라미터로 처리된다.경로 변수@{/hello/{param1}/{param2}(param1=${param1}, param2=${param2})}  -&gt; /hello/data1/data2  URL 경로상에 변수가 있으면 ()부분은 경로 변수로 처리된다.경로 변수 + 쿼리 파라미터@{/hello/{param1}(param1=${param1}, param2=${param2})}  -&gt; /hello/data1?param2=data2  경로 변수와 쿼리 파라미터를 함께 사용할 수 있다.상대경로, 절대경로, 프로토콜 기준을 표현할 수도 있다.  /hello : 절대경로  hello : 상대경로리터럴리터럴은 소스 코드상에 고정된 값을 말하는 용어다.String a = \"Hello\";int a = 10 * 20;다음 코드에서 “Hello”는 문자 리터럴, 10, 20은 숫자 리터럴이다.타임리프에는 다음과 같은 리터럴이 있다.  문자 : ‘hello’  숫자 : 10  불린 : true, false  null : null타임리프에서 문자 리터럴은 항상 ‘‘로 감싸야 한다.&lt;span th:text=\"'hello'\"&gt;하지만 공백 없이 쭉 이어진다면 하나의 의미있는 토큰으로 인지해서 작은 따옴표를 생략할 수 있다.&lt;span th:text=\"hello\"&gt;오류&lt;span th:text=\"hello world!\"&gt;&lt;/span&gt;수정&lt;span th:text=\"'hello world!'\"&gt;&lt;/span&gt;리터럴 대체&lt;span th:text=\"|hello ${data}|\"&gt;마지막 리터럴 대체 문법을 사용하면 마치 템플릿을 사용하는 것 처럼 편리하다.연산타임리프 연산은 자바와 크게 다르지 않으며, HTML 안에서 사용하기 때문에 HTML 엔티티를 주의해야 한다.  산술연산&lt;li&gt;10 + 2 = &lt;span th:text=\"10 + 2\"&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;10 % 2 == 0 = &lt;span th:text=\"10 % 2 == 0\"&gt;&lt;/span&gt;&lt;/li&gt;  비교연산 : HTML 엔티티를 사용해야 하는 부분을 주의          ’&gt;(gt), &lt;(lt), &gt;=(ge), &lt;=(le), !(not), ==(eq), !=(neq, ne)’      &lt;li&gt;1 &gt; 10 = &lt;span th:text=\"1 &amp;gt; 10\"&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;1 gt 10 = &lt;span th:text=\"1 gt 10\"&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;1 &gt;= 10 = &lt;span th:text=\"1 &gt;= 10\"&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;1 ge 10 = &lt;span th:text=\"1 ge 10\"&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;1 == 10 = &lt;span th:text=\"1 == 10\"&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;1 != 10 = &lt;span th:text=\"1 != 10\"&gt;&lt;/span&gt;&lt;/li&gt;  조건식 : 자바의 조건식과 유사&lt;li&gt;(10 % 2 == 0)? '짝수':'홀수' = &lt;span th:text=\"(10 % 2 == 0)? '짝수':'홀수'\"&gt;&lt;/span&gt;&lt;/li&gt;  Elvis 연산자 : 조건식의 편의 버전&lt;li&gt;${data}?: '데이터가 없습니다.' = &lt;span th:text=\"${data}?: '데이터가 없습니다.'\"&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;${nullData}?: '데이터가 없습니다.' = &lt;span th:text=\"${nullData}?: '데이터가 없습니다.'\"&gt;&lt;/span&gt;&lt;/li&gt;  No_Operation : _인 경우 마치 타임리프가 실행되지 않는 것 처럼 동작한다.&lt;li&gt;${data}?: _ = &lt;span th:text=\"${data}?: _\"&gt;데이터가 없습니다.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;${nullData}?: _ = &lt;span th:text=\"${nullData}?: _\"&gt;데이터가 없습니다.&lt;/span&gt;&lt;/li&gt;속성 값 설정타임리프 태그 속성타임리프는 주로 HTML 태그에 th:* 속성을 지정하는 방식으로 동작한다.th:*로 속성을 적용하면 기존 속성을 대체한다.기존 속성이 없으면 새로 만든다.속성 설정th:* 속성을 지정하면 타임리프는 기존 속성을 th:*로 지정한 속성으로 대체한다.기존 속성이 없다면 새로 만든다.&lt;input type=\"text\" name=\"mock\" th:name=\"userA\"/&gt;타임리프 렌더링 후 -&gt; &lt;input type = \"text\" name = \"userA\"/&gt;속성 추가th:attrappend : 속성 값의 뒤에 값을 추가한다.th:attrprepend : 속성 값의 앞에 값을 추가한다.th:classappend : class 속성에 자연스럽게 추가한다.- th:attrappend = &lt;input type=\"text\" class=\"text\" th:attrappend=\"class='large'\"/&gt;&lt;br/&gt;- th:attrprepend = &lt;input type=\"text\" class=\"text\" th:attrprepend=\"class='large'\"/&gt;&lt;br/&gt;- th:classappend = &lt;input type=\"text\" class=\"text\" th:classappend=\"large\"/&gt;&lt;br/&gt;checked 처리HTML에서는 input type=”checkbox” name=”active” checked=”false” -&gt; 경우에도 checked 속성이 있기에 checked 처리가 되어버린다.타임리프의 th:checked는 값이 false인 경우 checked 속성 자체를 제거한다.- checked o &lt;input type=\"checkbox\" name=\"active\" th:checked=\"true\"/&gt;&lt;br/&gt;- checked x &lt;input type=\"checkbox\" name=\"active\" th:checked=\"false\"/&gt;&lt;br/&gt;- checked=false &lt;input type=\"checkbox\" name=\"active\" checked=\"false\"/&gt;&lt;br/&gt;반복타임리프에서 반복은 th:each를 사용한다반복 기능tr th:each=”user : ${users}”  반복할 때 오른쪽 컬렉션 (${users})의 값을 하나씩 꺼내서 왼쪽 변수(user)에 담아서 태그를 반복 실행한다.  th:each는 List뿐만 아니라 배열, java.util.Iterable, java.util.Enumeration을 구현한 모든 객체를 반복에 사용할 수 있다.  Map도 사용할 수 있는데 이 경우 변수에 담기는 값은 Map.Entry이다.반복 상태 유지tr th:each=”user, userStat : ${users}”반복의 두번째 파라미터를 설정해서 반복의 상태를 확인할 수 있다.두번째 파라미터는 생략 가능한데, 생략하면 지정한 변수명(user) + Stat가 된다.위에서는 user + Stat = userStat이므로 생략 가능하다.반복 상태 유지 기능  index : 0부터 시작하는 값  count : 1부터 시작하는 값  size : 전체 사이즈  even, odd : 홀수, 짝수 여부(boolean)  first, last : 처음, 마지막 여부(boolean)  current : 현재 객체"
  },
  
  {
    "title": "프로그래머스 Lv0 부분 문자열",
    "url": "/posts/part-string/",
    "categories": "코딩테스트, 프로그래머스",
    "tags": "코딩테스트, 프로그래머스, Lv0",
    "date": "2024-12-04 00:00:00 +0900",
    





    
    "snippet": "처음에는 for문을 돌려서 풀어볼까 하다가 조금 더 간단하게 풀이하는 방법이 있을 것 같아서 검색해봤다.contains() : 대상 문자열의 특정 문자열이 포함되었는지 여부를 알고자 할 때 사용 (boolean타입 반환)indexOf() : 대상 문자열의 특정 문자의 index값을 찾고자 할 때 사용 (해당 index값 반환)matches() : 대상...",
    "content": "처음에는 for문을 돌려서 풀어볼까 하다가 조금 더 간단하게 풀이하는 방법이 있을 것 같아서 검색해봤다.contains() : 대상 문자열의 특정 문자열이 포함되었는지 여부를 알고자 할 때 사용 (boolean타입 반환)indexOf() : 대상 문자열의 특정 문자의 index값을 찾고자 할 때 사용 (해당 index값 반환)matches() : 대상 문자열의 정규표현식이 포함되었는지 여부를 알고싶을 때 사용 (boolean타입 반환)class Solution {    public int solution(String str1, String str2) {        int answer = 0;                if (str2.contains(str1)){            answer = 1;        }                return answer;    }}"
  },
  
  {
    "title": "프로그래머스 Lv0 뒤에서 5등까지",
    "url": "/posts/back5/",
    "categories": "코딩테스트, 프로그래머스",
    "tags": "코딩테스트, 프로그래머스, Lv0",
    "date": "2024-12-04 00:00:00 +0900",
    





    
    "snippet": "idx 변수를 세워 하나씩 값을 비교해나가며 크고 작음을 비교해볼까 하다가 문득 Arrays.sort메소드가 생각나서 정리한다.오름차순 정렬Arrays.sort()내림차순 정렬Integer arr[] = {1, 2, 3, 4, 5};Arrays.sort(arr, Collections.reverseOrder());배열을 내림차순으로 정렬하고자 할 때, ...",
    "content": "idx 변수를 세워 하나씩 값을 비교해나가며 크고 작음을 비교해볼까 하다가 문득 Arrays.sort메소드가 생각나서 정리한다.오름차순 정렬Arrays.sort()내림차순 정렬Integer arr[] = {1, 2, 3, 4, 5};Arrays.sort(arr, Collections.reverseOrder());배열을 내림차순으로 정렬하고자 할 때, 기본 타입 배열이라면 래퍼클래스로 만들어 두번째 인자에 넣어주어야 한다.(String은 기본 타입이 아니기에 그냥 사용해주면 될 것 같다)추가적으로 내림차순 정렬할 때 Collections를 사용할 때와 Comparator를 사용할 때의 차이점을 알아놔야할 것 같다.우선 Collections.reverseOrder()는 주로 List에 사용하며 Collections.sort와 함께 사용한다.Arrays.sort와 함께 사용하지 못하는 것은 아니지만 Object 배열처럼 서로 다른 타입이 섞인 배열에서는 런타입 에러가 발생할 가능성이 있다.웬만하면 Collections.sort를 사용하고자 한다.List&lt;Integer&gt; list = Arrays.asList(1, 3, 2, 5, 4);Collections.sort(list, Collections.reverseOrder());System.out.println(list); // [5, 4, 3, 2, 1]Comparator.reverseOrder()는 배열과 List 모두 사용 가능하며, Arrays.sort와 함께 사용한다.Integer[] arr = {1, 3, 2, 5, 4};Arrays.sort(arr, Comparator.reverseOrder());System.out.println(Arrays.toString(arr)); // [5, 4, 3, 2, 1]import java.util.*;class Solution {    public int[] solution(int[] num_list) {        int[] answer = new int[5];                Arrays.sort(num_list);                for (int i = 0; i &lt; 5; i++){            answer[i] = num_list[i];        }                return answer;    }}"
  },
  
  {
    "title": "프로그래머스 Lv0 배열 만들기 2",
    "url": "/posts/arr/",
    "categories": "코딩테스트, 프로그래머스",
    "tags": "코딩테스트, 프로그래머스, Lv0",
    "date": "2024-12-02 00:00:00 +0900",
    





    
    "snippet": "int값을 문자열로 바꾸는 생각까지는 했는데, “0”과 “5”로 이루어졌는지 검증하는 단계에서 문자열을 toCharArray()를 통해 다시 반복문 돌릴 생각은 하지 못했다.다음에 다시 풀 때 이 부분만 주의하고 다시 풀어보면 쉬울 듯 하다.int값을 String으로 변환하는 방법  String.valueOf()  Integer.toString()St...",
    "content": "int값을 문자열로 바꾸는 생각까지는 했는데, “0”과 “5”로 이루어졌는지 검증하는 단계에서 문자열을 toCharArray()를 통해 다시 반복문 돌릴 생각은 하지 못했다.다음에 다시 풀 때 이 부분만 주의하고 다시 풀어보면 쉬울 듯 하다.int값을 String으로 변환하는 방법  String.valueOf()  Integer.toString()String을 int로 변환하는 방법  Integer.parseInt()  Integer.valueOf()int값을 단일 문자(char)로 변환하는 방법int 값이 한 자리 숫자인 경우 문자 ‘0’을 더하면 해당 숫자를 문자로 변환할 수 있다.int num = 5;char ch = (char) (number + '0');char를 int로 변환하는 방법char에서 ‘0’을 빼면 해당 숫자의 정수값을 얻을 수 있다.char ch = '5';int number = ch - '0';import java.util.*;class Solution {    public ArrayList&lt;Integer&gt; solution(int l, int r) {        ArrayList&lt;Integer&gt; answer = new ArrayList&lt;&gt;();                for (int i = l; i &lt;= r; i++){            String number = String.valueOf(i);            boolean isValid = true;                        for (char digit : number.toCharArray()){                if (digit != '0' &amp;&amp; digit != '5'){                    isValid = false;                    break;                }            }                        if(isValid){                answer.add(i);            }                    }                if(answer.isEmpty()){            answer.add(-1);        }                return answer;    }}"
  },
  
  {
    "title": "프로그래머스 Lv0 대소문자 바꿔서 출력하기",
    "url": "/posts/Upper-Lower/",
    "categories": "코딩테스트, 프로그래머스",
    "tags": "코딩테스트, 프로그래머스, Lv0",
    "date": "2024-11-29 00:00:00 +0900",
    





    
    "snippet": "소문자 –&gt; 대문자 : toUpperCase()대문자 –&gt; 소문자 : toLowerCase()toCharArray()란?String 문자열을 char형 배열로 바꿔서 반환해주는 메소드“test”라는 문자열이 있으면arr[0] = ‘t’arr[1] = ‘e’arr[2] = ‘s’arr[3] = ‘t’charAt 함수String 타입의 데이터(...",
    "content": "소문자 –&gt; 대문자 : toUpperCase()대문자 –&gt; 소문자 : toLowerCase()toCharArray()란?String 문자열을 char형 배열로 바꿔서 반환해주는 메소드“test”라는 문자열이 있으면arr[0] = ‘t’arr[1] = ‘e’arr[2] = ‘s’arr[3] = ‘t’charAt 함수String 타입의 데이터(문자열)에서 특정 문자를 char 타입으로 변환할 때 사용하는 함수import java.util.Scanner;public class Solution {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        String a = sc.next();                String answer = \"\";                char[] arr = a.toCharArray();                for(int i = 0; i &lt; arr.length; i++){            if(Character.isUpperCase(arr[i])){                answer += Character.toLowerCase(arr[i]);            } else{                answer += Character.toUpperCase(arr[i]);            }        }        System.out.println(answer);    }}아스키코드로도 풀이가 가능할 듯 하다."
  }
  
]

